""""
=============
Settings Window
=============

MS update 9/27: 
    1 did error checking for main settings tab; not checked offset, sweep_axis, and fixed_axis json variable, and positioner tab
    3 created pop-up error message - ideally wanted to improve error detail in the future
    4 linear OR list frequency conditions met: can't input values on both
    5 list frequency conditions met: list must only be within 30 values and must be numbers within [0.030, 6000] MHz
    6 all blank input must be filled to do json tranfer with exception for buttons and drop down UI
"""""
import sys
from PyQt5 import QtWidgets as qtw
from PyQt5.QtWidgets import QMessageBox
from PyQt5 import QtGui as qtg
from PyQt5 import QtCore as qtc
from settingsWindow_form import Ui_SettingsWindow  # Import qtdesigner object
import json
import re

class SettingsWindow(qtw.QWidget, Ui_SettingsWindow):

    def __init__(self):
        """MainWindow constructor"""
        super().__init__()
        self.setupUi(self)
        # Main UI code goes here
        self.settings_submit_pushButton_5.clicked.connect(self.check_json)
        # End main UI code
        self.show()

    # pop-up error box
    # self.button.clicked.connect(show_popup)
    def check_json(self):
        #properties of popup
        msg = QMessageBox()
        msg.setWindowTitle("Warning!")
        msg.setText("Input Error")
        msg.setIcon(QMessageBox.Critical)
        msg.setDetailedText("Will ideally show error details")
        # msg.exec_() # shows pop-up error

        # error checking
        if len(self.pos_alias_lineEdit_6.text()) > 0 and self.pos_alias_lineEdit_6.text().isnumeric():
            if len(self.lineEdit_list_5.text()) == 0:
                if (len(self.lineEdit_stop_4.text()) > 0 and len(self.lineEdit_start_4.text()) > 0 and
                        self.lineEdit_stop_4.text().isnumeric() and self.lineEdit_start_4.text().isnumeric()):
                    self.fill_json()
                else: msg.exec_()
            elif re.search("^(( )*(([0-9]*\.([0-9]+))|[0-9]+))(,( )*(([0-9]*\.([0-9]+))|[0-9]+)){0,29}$", self.lineEdit_list_5.text()):
                temp_ar = str(self.lineEdit_list_5.text()).split(",")

                if self.traverse(temp_ar,0.03,6000): # check if list array values are [0.03, 6000] MHz
                    self.fill_json()
                else: msg.exec_()
            else: msg.exec_()
        else: msg.exec_()

    def traverse(self, temp_list, low, high):
        for i in range(0, len(temp_list)):   # change list to integer
            temp_list[i] = float(temp_list[i])
        for x in temp_list: # traverse in the list
            if x < low or x > high: # condition check
                return False
        return True

    def fill_json(self):
        settings_dict = {
            "linear": {
                "start": None,
                "stop": None,
                "points": None
            },
            "list": None,
            "impedance": False,
            "calibration": False,
            "averaging": None,
            "positioner_mv": "step",
            "resolution": 5.00,
            "gpib_addr": 16,
            "alias": None,
            "baud_rate": None,

            "offset": {
                "pan": None,
                "tilt": None
            },
            "sweep_axis": None,
            "fixed_angle": None
        }

        # Input Details
        # linear frequency
        if len(self.lineEdit_start_4.text()) > 0:
            settings_dict["linear"]["start"] = int(self.lineEdit_start_4.text())

        if len(self.lineEdit_stop_4.text()) > 0:
            settings_dict["linear"]["stop"] = int(self.lineEdit_stop_4.text())

        if len(self.lineEdit_stop_4.text()) > 0 and len(self.lineEdit_start_4.text()) > 0:
            settings_dict["linear"]["points"] = int(self.comboBox_4.currentText())

        # list frequency
        if len(self.lineEdit_list_5.text()) > 0:
            settings_dict["list"] = str(self.lineEdit_list_5.text()).split(",")
            for i in range(0, len(settings_dict["list"])):
                settings_dict["list"][i] = float(settings_dict["list"][i])

        # impedance
        if self.Impedance_radioButton_y_7.isChecked():
            settings_dict["impedance"] = True
        # calibration
        if self.Calibration_radioButton_y_7.isChecked():
            settings_dict["calibration"] = True
        # averaging
        settings_dict["averaging"] = int(self.Averaging_comboBox_7.currentText())
        # post mvmt
        if self.cont_radioButton_7.isChecked():
            settings_dict["positioner_mv"] = "continuous"
        # resolution
        if self.res_doubleSpinBox_7.value() > 0:
            settings_dict["resolution"] = self.res_doubleSpinBox_7.value()
        # positioner alias
        settings_dict["alias"] = int(self.pos_alias_lineEdit_6.text())
        # baud rate
        settings_dict["baud_rate"] = int(self.BaudRate_comboBox_6.currentText())

        # positioner settings tab not done any error checking yet
        settings_dict["offset"]["pan"] = self.pan_lcdNumber_4.intValue()
        settings_dict["offset"]["tilt"] = self.tilt_lcdNumber_4.intValue()
        settings_dict["sweep_axis"] = "pan"
        settings_dict["fixed_angle"] = 0
        # settings_dict["gpib_addr"] = int(self.GPIB_addr_comboBox_6.currentText())

        with open("pivot.json", "w") as file:
            json.dump(settings_dict, file, indent = 4) # indent creates uniform look


if __name__ == '__main__':
    app = qtw.QApplication(sys.argv)
    sw = SettingsWindow()
    sys.exit(app.exec())
